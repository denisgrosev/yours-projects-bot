import os
import datetime
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update, InputMediaPhoto
from telegram.ext import ContextTypes

# –õ–æ–≥–≥–µ—Ä
LOG_DIR = "/app/data/files212/welcome_menu/log"
os.makedirs(LOG_DIR, exist_ok=True)
LOG_FILE = os.path.join(LOG_DIR, "log.txt")

def log_event(event, **kwargs):
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    parts = [f"[{now}] {event}"]
    for k, v in kwargs.items():
        parts.append(f"{k}={v!r}")
    line = " | ".join(parts)
    try:
        with open(LOG_FILE, "a") as f:
            f.write(line + "\n")
    except Exception:
        pass

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–¢–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ãüñ®Ô∏è¬ª, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã (–ø—Ä–æ–µ–∫—Ç—ã, –¥–æ–∫–ª–∞–¥—ã, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã) –ø–æ —Ç–≤–æ–µ–π —Ç–µ–º–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É. –ó–∞–±—É–¥—å –æ –±–µ—Å—Å–æ–Ω–Ω—ã—Ö –Ω–æ—á–∞—Ö ‚Äî –±–æ—Ç –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
)

COST_TEXT = (
    "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å\n"
    "‚Äì 1 —Ä–∞–∑–¥–µ–ª = 20‚ÄØ‚ÇΩ (~1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞).\n"
    "‚Äì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî 1 —Ä–∞–∑–¥–µ–ª.\n"
    "‚Äì –ß–µ—Å—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞: –º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å –ÆKassa, —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π"
)

PAY_TEXT = (
    "üí≥ –û–ø–ª–∞—Ç–∞\n"
    "‚Äì –ß–µ—Ä–µ–∑ –°–ë–ü: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.\n"
    "‚Äì –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –ø–æ—á—Ç–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ.\n"
    "‚Äì –ü–æ–º–∏–º–æ –°–ë–ü –∏–º–µ—é—Ç—Å—è –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (SberPay, Mir Pay, –ÆMoney)"
)

REF_TEXT = (
    "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
    "‚Äì –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π 20‚ÄØ% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
    "‚Äì –ë–æ–Ω—É—Å—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n"
    "‚Äì –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±–∞–ª–∞–Ω—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.\n"
    "‚Äì –°–≤–æ—é —Å—Å—ã–ª–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å–º–æ—Ç—Ä–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞¬ª."
)

WELCOME_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å?", callback_data="welcome_cost")],
])

COST_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?", callback_data="welcome_pay")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_back_to_hello")],
])

PAY_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üë• –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?", callback_data="welcome_ref")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_cost")],
])

REF_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üü¢ –ù–∞—á–∞—Ç—å", callback_data="welcome_start")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_pay")],
])

EXAMPLE_DIR = "/app/data/files212/welcome_menu/example_photo"
FILE_ID_PATH = "/app/data/files212/welcome_menu/files_id/files_id.txt"
EXAMPLE_PAGES = 10

def load_file_ids(filepath):
    file_ids = {}
    log_event("load_file_ids_called", filepath=filepath)
    if not os.path.exists(filepath):
        log_event("file_ids_file_not_found", filepath=filepath)
        return file_ids
    try:
        with open(filepath, "r") as f:
            for line in f:
                line = line.strip()
                if not line or " - " not in line:
                    continue
                name, file_id = line.split(" - ", 1)
                file_ids[name.strip()] = file_id.strip()
        log_event("file_ids_loaded", count=len(file_ids))
    except Exception as e:
        log_event("file_ids_load_error", error=str(e))
    return file_ids

def save_file_ids(filepath, file_ids_dict):
    try:
        with open(filepath, "w") as f:
            for fname, file_id in file_ids_dict.items():
                f.write(f"{fname} - {file_id}\n")
        log_event("file_ids_saved", count=len(file_ids_dict))
    except Exception as e:
        log_event("file_ids_save_error", error=str(e))

def get_example_keyboard(page):
    prev_btn = InlineKeyboardButton("‚óÄÔ∏è", callback_data="example_prev") if page > 1 else None
    next_btn = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="example_next") if page < EXAMPLE_PAGES else None
    row = [btn for btn in [prev_btn, next_btn] if btn]
    keyboard = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="example_skip")])
    return InlineKeyboardMarkup(keyboard)

async def show_example_page(context, chat_id, page=1, edit=False, message_id=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç msg –ø—Ä–∏ send_photo, –∏–Ω–∞—á–µ None."""
    user_id = chat_id
    file_ids = load_file_ids(FILE_ID_PATH)
    fname = f"{page}.png"
    file_id = file_ids.get(fname)
    caption = f"–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã. –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/10."
    log_event("show_example_page_called", chat_id=chat_id, user_id=user_id, page=page, edit=edit, file_id_found=bool(file_id))

    need_new_file = False

    if file_id:
        try:
            if edit and message_id is not None:
                await context.bot.edit_message_media(
                    media=InputMediaPhoto(media=file_id, caption=caption),
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=get_example_keyboard(page)
                )
                log_event("edit_message_media_by_file_id_success", chat_id=chat_id, file_id=file_id, page=page)
                return None
            else:
                msg = await context.bot.send_photo(chat_id=chat_id, photo=file_id, caption=caption, reply_markup=get_example_keyboard(page))
                log_event("send_photo_by_file_id_success", chat_id=chat_id, file_id=file_id, page=page)
                return msg
        except Exception as e:
            need_new_file = True
            log_event("file_id_invalid_or_send_error", file_id=file_id, error=str(e), page=page)
    else:
        need_new_file = True

    if need_new_file:
        file_path = os.path.join(EXAMPLE_DIR, fname)
        if not os.path.exists(file_path):
            log_event("example_file_not_found", file_path=file_path, chat_id=chat_id, page=page)
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
        with open(file_path, "rb") as photo:
            try:
                if edit and message_id is not None:
                    await context.bot.edit_message_media(
                        media=InputMediaPhoto(media=photo, caption=caption),
                        chat_id=chat_id,
                        message_id=message_id,
                        reply_markup=get_example_keyboard(page)
                    )
                    log_event("edit_message_media_by_file_success", chat_id=chat_id, file_path=file_path, page=page)
                    return None
                else:
                    msg = await context.bot.send_photo(chat_id=chat_id, photo=photo, caption=caption, reply_markup=get_example_keyboard(page))
                    log_event("send_photo_by_file_success", chat_id=chat_id, file_path=file_path, page=page)
                    try:
                        new_file_id = (msg.photo[-1].file_id if hasattr(msg, "photo") and msg.photo else None)
                    except Exception as e:
                        new_file_id = None
                        log_event("extract_file_id_error", error=str(e))
                    if new_file_id:
                        file_ids[fname] = new_file_id
                        save_file_ids(FILE_ID_PATH, file_ids)
                        log_event("new_file_id_saved", file_name=fname, file_id=new_file_id)
                    return msg
            except Exception as e:
                log_event("send_photo_by_file_error", file_path=file_path, error=str(e), page=page)
                await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º.")
                return None

async def show_welcome_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id if update.effective_user else "unknown"
    log_event("show_welcome_menu", chat_id=chat_id, user_id=user_id)
    await context.bot.send_message(
        chat_id=chat_id,
        text=WELCOME_TEXT,
        reply_markup=WELCOME_MENU
    )
    context.user_data["welcome_step"] = "hello"

async def welcome_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    step = query.data
    chat_id = query.message.chat_id
    user_id = query.from_user.id if query.from_user else "unknown"
    log_event("welcome_menu_callback_called", step=step, chat_id=chat_id, user_id=user_id)
    await query.answer()

    if step == "welcome_cost":
        log_event("show_cost", chat_id=chat_id)
        await query.edit_message_text(COST_TEXT, reply_markup=COST_MENU)
        context.user_data["welcome_step"] = "cost"
    elif step == "welcome_pay":
        log_event("show_pay", chat_id=chat_id)
        await query.edit_message_text(PAY_TEXT, reply_markup=PAY_MENU)
        context.user_data["welcome_step"] = "pay"
    elif step == "welcome_ref":
        log_event("show_ref", chat_id=chat_id)
        await query.edit_message_text(REF_TEXT, reply_markup=REF_MENU)
        context.user_data["welcome_step"] = "ref"
    elif step == "welcome_back_to_hello":
        log_event("back_to_hello", chat_id=chat_id)
        await query.edit_message_text(WELCOME_TEXT, reply_markup=WELCOME_MENU)
        context.user_data["welcome_step"] = "hello"

    elif step == "welcome_start":
        log_event("start_example", chat_id=chat_id)
        context.user_data["welcome_step"] = "example"
        context.user_data["example_page"] = 1
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∫–æ–π
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id)
            log_event("ref_message_deleted", chat_id=chat_id, msg_id=query.message.message_id)
        except Exception as e:
            log_event("ref_message_delete_error", chat_id=chat_id, msg_id=query.message.message_id, error=str(e))
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ä–∞–±–æ—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        msg = await show_example_page(context, chat_id, page=1, edit=False, message_id=None)
        if msg:
            context.user_data["example_message_id"] = msg.message_id

    elif step == "example_prev":
        page = context.user_data.get("example_page", 1)
        page = max(1, page - 1)
        context.user_data["example_page"] = page
        message_id = context.user_data.get("example_message_id")
        await show_example_page(context, chat_id, page=page, edit=True, message_id=message_id)
    elif step == "example_next":
        page = context.user_data.get("example_page", 1)
        page = min(EXAMPLE_PAGES, page + 1)
        context.user_data["example_page"] = page
        message_id = context.user_data.get("example_message_id")
        await show_example_page(context, chat_id, page=page, edit=True, message_id=message_id)
    elif step == "example_skip":
        log_event("example_skip", chat_id=chat_id)
        from bot import start  # –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏–∑ bot
        await start(update, context)
        context.user_data["welcome_step"] = "hello"
    else:
        log_event("fallback", chat_id=chat_id)
        await query.edit_message_text(WELCOME_TEXT, reply_markup=WELCOME_MENU)
        context.user_data["welcome_step"] = "hello"
