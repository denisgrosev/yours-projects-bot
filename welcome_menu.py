from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ¬´–¢–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ãüñ®Ô∏è¬ª, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —É—á–µ–±–Ω—ã–µ —Ä–∞–±–æ—Ç—ã (–ø—Ä–æ–µ–∫—Ç—ã, –¥–æ–∫–ª–∞–¥—ã, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã) –ø–æ —Ç–≤–æ–µ–π —Ç–µ–º–µ –∏ –ø—Ä–µ–¥–º–µ—Ç—É. –ó–∞–±—É–¥—å –æ –±–µ—Å—Å–æ–Ω–Ω—ã—Ö –Ω–æ—á–∞—Ö ‚Äî –±–æ—Ç –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
)

COST_TEXT = (
    "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å\n"
    "‚Äì 1 —Ä–∞–∑–¥–µ–ª = 20‚ÄØ‚ÇΩ (~1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—Å—Ç–∞).\n"
    "‚Äì –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ ‚Äî 1 —Ä–∞–∑–¥–µ–ª.\n"
    "‚Äì –ß–µ—Å—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞: –º—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å –ÆKassa, —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π"
)

PAY_TEXT = (
    "üí≥ –û–ø–ª–∞—Ç–∞\n"
    "‚Äì –ß–µ—Ä–µ–∑ –°–ë–ü: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏.\n"
    "‚Äì –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –ø–æ—á—Ç–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ.\n"
    "‚Äì –ü–æ–º–∏–º–æ –°–ë–ü –∏–º–µ—é—Ç—Å—è –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (SberPay, Mir Pay, –ÆMoney)"
)

REF_TEXT = (
    "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
    "‚Äì –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π 20‚ÄØ% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
    "‚Äì –ë–æ–Ω—É—Å—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.\n"
    "‚Äì –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –±–∞–ª–∞–Ω—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.\n"
    "‚Äì –°–≤–æ—é —Å—Å—ã–ª–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —Å–º–æ—Ç—Ä–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞¬ª."
)

WELCOME_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å?", callback_data="welcome_cost")],
])

COST_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?", callback_data="welcome_pay")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_back_to_hello")],
])

PAY_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üë• –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?", callback_data="welcome_ref")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_cost")],
])

REF_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üü¢ –ù–∞—á–∞—Ç—å", callback_data="welcome_start")],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_pay")],
])


def load_file_ids(filepath):
    file_ids = {}
    try:
        with open(filepath, "r") as f:
            for line in f:
                line = line.strip()
                if not line or " - " not in line:
                    continue
                name, file_id = line.split(" - ", 1)
                file_ids[name.strip()] = file_id.strip()
    except FileNotFoundError:
        pass
    return file_ids

def save_file_ids(filepath, file_ids_dict):
    with open(filepath, "w") as f:
        for fname, file_id in file_ids_dict.items():
            f.write(f"{fname} - {file_id}\n")

EXAMPLE_DIR = "/app/data/files212/welcome_menu/example_photo"
FILE_ID_PATH = "/app/data/files212/welcome_menu/files_id/files_id.txt"
EXAMPLE_PAGES = 10

def load_file_ids(filepath):
    file_ids = {}
    if not os.path.exists(filepath):
        return file_ids
    with open(filepath, "r") as f:
        for line in f:
            line = line.strip()
            if not line or " - " not in line:
                continue
            name, file_id = line.split(" - ", 1)
            file_ids[name.strip()] = file_id.strip()
    return file_ids

def save_file_ids(filepath, file_ids_dict):
    with open(filepath, "w") as f:
        for fname, file_id in file_ids_dict.items():
            f.write(f"{fname} - {file_id}\n")

def get_example_keyboard(page):
    prev_btn = InlineKeyboardButton("‚óÄÔ∏è", callback_data="example_prev") if page > 1 else None
    next_btn = InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="example_next") if page < EXAMPLE_PAGES else None
    row = [btn for btn in [prev_btn, next_btn] if btn]
    keyboard = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="example_skip")])
    return InlineKeyboardMarkup(keyboard)

async def show_example_page(update, context, page=1, edit=False):
    chat_id = update.effective_chat.id
    file_ids = load_file_ids(FILE_ID_PATH)
    fname = f"{page}.png"
    file_id = file_ids.get(fname)
    caption = f"–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã. –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}/10."

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏ –æ–±–Ω–æ–≤–∏—Ç—å file_id
    need_new_file = False
    message_func = context.bot.send_photo if not edit else context.bot.edit_message_media

    if file_id:
        try:
            if not edit:
                await context.bot.send_photo(chat_id=chat_id, photo=file_id, caption=caption, reply_markup=get_example_keyboard(page))
            else:
                from telegram import InputMediaPhoto
                await context.bot.edit_message_media(
                    media=InputMediaPhoto(media=file_id, caption=caption),
                    chat_id=chat_id,
                    message_id=update.callback_query.message.message_id,
                    reply_markup=get_example_keyboard(page)
                )
            context.user_data["example_page"] = page
            return
        except Exception as e:
            # file_id –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Äî –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            need_new_file = True
    else:
        need_new_file = True

    # –ï—Å–ª–∏ file_id –Ω–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º file_id.txt
    if need_new_file:
        file_path = os.path.join(EXAMPLE_DIR, fname)
        if not os.path.exists(file_path):
            await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        with open(file_path, "rb") as photo:
            if not edit:
                msg = await context.bot.send_photo(chat_id=chat_id, photo=photo, caption=caption, reply_markup=get_example_keyboard(page))
            else:
                from telegram import InputMediaPhoto
                msg = await context.bot.edit_message_media(
                    media=InputMediaPhoto(media=photo, caption=caption),
                    chat_id=chat_id,
                    message_id=update.callback_query.message.message_id,
                    reply_markup=get_example_keyboard(page)
                )
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            new_file_id = (msg.photo[-1].file_id if hasattr(msg, "photo") and msg.photo else msg.media.photo[-1].file_id)
        except Exception:
            new_file_id = None
        if new_file_id:
            file_ids[fname] = new_file_id
            save_file_ids(FILE_ID_PATH, file_ids)
        context.user_data["example_page"] = page


# –ü–æ–¥–∫–ª—é—á–∏ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –≥–ª–∞–≤–Ω–æ–º —Ñ–∞–π–ª–µ –∏ –≤—ã–∑–æ–≤–∏ –∏–∑ start() –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π!
async def show_welcome_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=WELCOME_TEXT,
        reply_markup=WELCOME_MENU
    )
    context.user_data["welcome_step"] = "hello"

async def welcome_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    step = query.data
    await query.answer()

    # –ë–∞–∑–æ–≤—ã–µ —à–∞–≥–∏
    if step == "welcome_cost":
        await query.edit_message_text(COST_TEXT, reply_markup=COST_MENU)
        context.user_data["welcome_step"] = "cost"
    elif step == "welcome_pay":
        await query.edit_message_text(PAY_TEXT, reply_markup=PAY_MENU)
        context.user_data["welcome_step"] = "pay"
    elif step == "welcome_ref":
        await query.edit_message_text(REF_TEXT, reply_markup=REF_MENU)
        context.user_data["welcome_step"] = "ref"
    elif step == "welcome_back_to_hello":
        await query.edit_message_text(WELCOME_TEXT, reply_markup=WELCOME_MENU)
        context.user_data["welcome_step"] = "hello"

    # –ü–æ—Å–ª–µ "—Ä–µ—Ñ–µ—Ä–∞–ª–∫–∞" ‚Äî —Å—Ç–∞—Ä—Ç –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã
    elif step == "welcome_start":
        context.user_data["welcome_step"] = "example"
        context.user_data["example_page"] = 1
        await show_example_page(update, context, page=1)

    # –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã
    elif step == "example_prev":
        page = context.user_data.get("example_page", 1)
        page = max(1, page - 1)
        context.user_data["example_page"] = page
        await show_example_page(update, context, page=page, edit=True)
    elif step == "example_next":
        page = context.user_data.get("example_page", 1)
        page = min(EXAMPLE_PAGES, page + 1)
        context.user_data["example_page"] = page
        await show_example_page(update, context, page=page, edit=True)
    elif step == "example_skip":
        from bot import start  # –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –∏–∑ bot
        await start(update, context)
        context.user_data["welcome_step"] = "hello"

    # –§–æ–ª–±—ç–∫
    else:
        await query.edit_message_text(WELCOME_TEXT, reply_markup=WELCOME_MENU)
        context.user_data["welcome_step"] = "hello"
